CREATE DATABASE cart_db;  -- Create database (if not exists)
USE cart_db;              -- Select the database

CREATE TABLE cart (
    id INT AUTO_INCREMENT PRIMARY KEY,
    user_id INT NOT NULL,
    username VARCHAR(255) NOT NULL,
    comic_id INT NOT NULL,
    comic_name VARCHAR(255) NOT NULL,
    comic_volume VARCHAR(255) NOT NULL,
    price_per_item DECIMAL(10,2) NOT NULL,
    quantity INT NOT NULL
);


-- Create the comic database
CREATE DATABASE IF NOT EXISTS comic_db;
USE comic_db;

-- Create the comic table
DROP TABLE IF EXISTS comic;

CREATE TABLE IF NOT EXISTS comic (
    comic_id INT AUTO_INCREMENT PRIMARY KEY,
    comic_name VARCHAR(255) NOT NULL,
    author VARCHAR(255) NOT NULL,
    genre VARCHAR(255),
    status ENUM('ongoing', 'completed', 'hiatus') NOT NULL,
    description TEXT,
    comic_art BLOB
);

-- Insert some sample data
INSERT INTO comic (comic_name, author, genre, status, description) VALUES
('One Piece', 'Eiichiro Oda', 'Action,Adventure,Fantasy', 'ongoing', 'Follow Monkey D. Luffy and his pirate crew in their search for the ultimate treasure, the One Piece.'),
('Attack on Titan', 'Hajime Isayama', 'Action,Drama,Fantasy', 'completed', 'Humanity lives inside cities surrounded by enormous walls due to the Titans, gigantic humanoid creatures who devour humans seemingly without reason.'),
('Demon Slayer', 'Koyoharu Gotouge', 'Action,Fantasy', 'completed', 'Tanjiro Kamado''s peaceful life is shattered when his family is slaughtered by demons. His sister Nezuko is turned into a demon, but still shows signs of human emotion and thought.'),
('Solo Leveling', 'Chugong', 'Action,Adventure,Fantasy', 'completed', 'In a world where hunters must battle dangerous dungeons, Sung Jin-Woo is known as the weakest of them all. After surviving a near-death experience, he discovers a unique ability to level up and become stronger like in a video game.'),
('Tower of God', 'SIU', 'Action,Adventure,Fantasy,Drama', 'ongoing', 'Follow Twenty-Fifth Bam as he enters the mysterious Tower in pursuit of Rachel. Each floor of the tower contains unique tests, challenges, and powerful opponents. Those who reach the top of the tower can have their deepest desires granted.'),
('Naruto', 'Masashi Kishimoto', 'Action,Adventure,Fantasy', 'completed', 'Follow Naruto Uzumaki, a young ninja with a sealed demon within him, as he seeks to become the Hokage, the leader of his village. Along the way, he faces powerful enemies and learns about friendship, loyalty, and sacrifice.'),
('Bleach', 'Tite Kubo', 'Action,Adventure,Supernatural', 'completed', 'Ichigo Kurosaki never asked for the ability to see ghosts -- he was born with the gift. When his family is attacked by a Hollow, Ichigo becomes a Soul Reaper, dedicating his life to protecting the innocent and helping tortured souls find peace.'),
('Kagurabachi', 'Takeru Hokazono', 'Action,Supernatural,Drama', 'ongoing', 'Following the brutal murder of his father, a young swordsmith seeks revenge while protecting his father''s legendary enchanted swords from falling into the wrong hands.');




-- Create a new database for chapters
CREATE DATABASE IF NOT EXISTS chapter_db;
USE chapter_db;

-- Drop existing tables to ensure clean setup
DROP TABLE IF EXISTS chapter;

-- Create chapters table
CREATE TABLE IF NOT EXISTS chapter (
    chapter_id INT AUTO_INCREMENT PRIMARY KEY,
    comic_id INT NOT NULL,
    chapter_number INT NOT NULL,
    title VARCHAR(255) NOT NULL,
    release_date DATE NOT NULL,
    UNIQUE KEY unique_chapter (comic_id, chapter_number)
);

-- Insert chapters data
-- One Piece (comic_id = 1)
INSERT INTO chapter (comic_id, chapter_number, title, release_date) VALUES
(1, 1, 'Romance Dawn', '2023-01-01'),
(1, 2, 'They Call Him Strawhat Luffy', '2023-01-08'),
(1, 3, 'That Boy The Straw Hat Wearing Luffy', '2023-01-15'),
(1, 1140, 'Chapter 1140', '2023-03-01'),
(1, 1141, 'Chapter 1141', '2023-03-08');

-- Attack on Titan (comic_id = 2)
INSERT INTO chapter (comic_id, chapter_number, title, release_date) VALUES
(2, 1, 'To You, in 2000 Years', '2023-01-01'),
(2, 2, 'On That Day', '2023-01-08'),
(2, 3, 'The Night of the Disbanding', '2023-01-15'),
(2, 138, 'A Long Dream', '2023-05-01'),
(2, 139, 'Heading to the Tree On Top of the Hill', '2023-05-08');

-- Demon Slayer (comic_id = 3)
INSERT INTO chapter (comic_id, chapter_number, title, release_date) VALUES
(3, 1, 'Cruelty', '2023-01-01'),
(3, 2, 'A Person Unknown', '2023-01-08'),
(3, 3, 'I Will Return Before Dawn', '2023-01-15'),
(3, 204, 'Chapter 204', '2023-05-01'),
(3, 205, 'Chapter 205', '2023-05-08');

-- Solo Leveling (comic_id = 4)
INSERT INTO chapter (comic_id, chapter_number, title, release_date) VALUES
(4, 1, 'Chapter 1', '2023-02-01'),
(4, 2, 'Chapter 2', '2023-02-08'),
(4, 3, 'Chapter 3', '2023-02-15'),
(4, 177, 'Chapter 177', '2023-03-01'),
(4, 178, 'Chapter 178', '2023-03-08');


-- Tower of God (comic_id = 5)
INSERT INTO chapter (comic_id, chapter_number, title, release_date) VALUES
(5, 1, 'Season 1 Episode 1', '2023-03-01'),
(5, 2, 'Season 1 Episode 2', '2023-03-08'),
(5, 3, 'Season 1 Episode 3', '2023-03-15'),
(5, 649, 'Season 3 Episode 649', '2023-05-01'),
(5, 650, 'Season 3 Episode 650', '2023-05-08');

-- Naruto (comic_id = 6)
INSERT INTO chapter (comic_id, chapter_number, title, release_date) VALUES
(6, 1, 'Naruto Uzumaki!!', '2023-04-01'),
(6, 2, 'Konohamaru!!', '2023-04-08'),
(6, 3, 'Sasuke Uchiha!!', '2023-04-15'),
(6, 699, 'The Seal of Reconciliation', '2023-05-01'),
(6, 700, 'Uzumaki Naruto!!', '2023-05-08');

-- Bleach (comic_id = 7)
INSERT INTO chapter (comic_id, chapter_number, title, release_date) VALUES
(7, 1, 'Strawberry & the Soul Reaers', '2023-04-01'),
(7, 2, 'Starter', '2023-04-08'),
(7, 3, 'Head-Hittin', '2023-04-15'),
(7, 487, 'Breathe But Blind', '2023-05-01'),
(7, 488, 'Bond Behind Blast', '2023-05-08');

-- Kagurabachi (comic_id = 8)
INSERT INTO chapter (comic_id, chapter_number, title, release_date) VALUES
(8, 1, 'The Enchanted Blade', '2023-05-01'),
(8, 2, 'Inheritance', '2023-05-08'),
(8, 3, 'The Hunt Begins', '2023-05-15'),
(8, 29, 'Chapter 29', '2023-06-01'),
(8, 30, 'Chapter 30', '2023-06-08');

-- Create the comic database
CREATE DATABASE IF NOT EXISTS comments_db;
USE comments_db;

-- Create the comic table
DROP TABLE IF EXISTS comments;

CREATE TABLE comments (
    comment_id INT PRIMARY KEY AUTO_INCREMENT,
    thread_id INT NOT NULL,
    user_id INT NOT NULL,
    parent_id INT,
    content VARCHAR(1000) NOT NULL,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    likes INT DEFAULT 0,
    status ENUM('published', 'archived', 'deleted') DEFAULT 'published'
);

-- Create the comic database
CREATE DATABASE IF NOT EXISTS comments_db;
USE comments_db;

-- Create the comic table
DROP TABLE IF EXISTS comments;

CREATE TABLE comments (
    comment_id INT PRIMARY KEY AUTO_INCREMENT,
    thread_id INT NOT NULL,
    user_id INT NOT NULL,
    parent_id INT,
    content VARCHAR(1000) NOT NULL,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    likes INT DEFAULT 0,
    status ENUM('published', 'archived', 'deleted') DEFAULT 'published'
);

-- Create database for reading history
CREATE DATABASE IF NOT EXISTS history_db;
USE history_db;

-- Create reading history table
CREATE TABLE IF NOT EXISTS reading_history (
    user_id INT NOT NULL,
    chapter_id INT NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY (user_id, chapter_id)
);

-- Insert sample reading history data

-- User 1 has read chapters 1, 2, 3 of comic 1
INSERT INTO reading_history (user_id, chapter_id, created_at) VALUES 
(1, 1, '2023-04-10 14:30:00'),  -- Chapter 1
(1, 2, '2023-04-11 20:15:00'),  -- Chapter 2
(1, 3, '2023-04-12 18:45:00');  -- Chapter 3

-- User 1 has also read chapters 5, 6 of comic 2
INSERT INTO reading_history (user_id, chapter_id, created_at) VALUES 
(1, 5, '2023-05-05 09:20:00'),  -- Chapter 1 of comic 2
(1, 6, '2023-05-06 22:10:00');  -- Chapter 2 of comic 2

-- User 2 has read chapters 1, 3, 5 (skipped some)
INSERT INTO reading_history (user_id, chapter_id, created_at) VALUES 
(2, 1, '2023-04-15 10:30:00'),  -- Chapter 1
(2, 3, '2023-04-17 11:25:00'),  -- Chapter 3
(2, 5, '2023-05-08 16:40:00');  -- Chapter 1 of comic 2

-- User 3 has read only the first chapter
INSERT INTO reading_history (user_id, chapter_id, created_at) VALUES 
(3, 1, '2023-04-20 19:15:00');  -- Only Chapter 1

-- User 4 hasn't read any chapters (no entries)

-- Sample queries:

-- Get all reading history for user 1
-- SELECT * FROM reading_history WHERE user_id = 1 ORDER BY created_at DESC;

-- Check if user 2 has read chapter 2
-- SELECT * FROM reading_history WHERE user_id = 2 AND chapter_id = 2;

-- Get the list of chapters read by user 3
-- SELECT chapter_id FROM reading_history WHERE user_id = 3; 

-- Create the database
CREATE DATABASE notification_db;

-- Use the database
USE notification_db;

-- Create the notification table
CREATE TABLE notification (
    notification_id INT AUTO_INCREMENT PRIMARY KEY,
    user_id INT NOT NULL,
    description VARCHAR(255) NOT NULL,
    time TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Insert sample data
INSERT INTO notification (user_id, description) VALUES
(1, 'Payment received successfully! You are now subscribed to Monthly Premium Plan.'),
(2, 'Payment received successfully! You are now subscribed to Yearly Premium Plan.'); 

-- Create a new database for pages
CREATE DATABASE IF NOT EXISTS page_db;
USE page_db;

-- Drop existing tables if they exist
DROP TABLE IF EXISTS page;

-- Create page table
CREATE TABLE IF NOT EXISTS page (
    page_id INT AUTO_INCREMENT PRIMARY KEY,
    comic_id INT NOT NULL,
    chapter_id INT NOT NULL,
    page_number INT NOT NULL,
    page_image LONGBLOB NOT NULL,
    UNIQUE KEY unique_page (comic_id, chapter_id, page_number)
);

-- Note: This database doesn't have a foreign key constraint to the chapter table
-- since it's in a separate microservice. Referential integrity will be maintained
-- at the application level. 

-- Create the database
CREATE DATABASE premium_plan_db;

-- Use the database
USE premium_plan_db;

-- Create the premium_plan table
CREATE TABLE premium_plan (
    plan_id INT AUTO_INCREMENT PRIMARY KEY,
    plan_name VARCHAR(255) NOT NULL,
    description TEXT NOT NULL,
    price DECIMAL(10,2) NOT NULL,
    duration ENUM('MONTHLY', 'QUARTERLY', 'YEARLY') NOT NULL,
    features TEXT NOT NULL
);

-- Insert sample data into the premium_plan table
INSERT INTO premium_plan (plan_name, description, price, duration, features) VALUES
('Monthly Premium', 'Access all premium features for one month', 9.99, 'MONTHLY', 'Unlimited chapter access'),
('Quarterly Premium', 'Access all premium features for three months', 24.99, 'QUARTERLY', 'Unlimited chapter access'),
('Yearly Premium', 'Access all premium features for one year', 89.99, 'YEARLY', 'Unlimited chapter access'); 


-- Create the database
CREATE DATABASE receipt_db;

-- Use the database
USE receipt_db;

-- Create the receipt table
CREATE TABLE receipt (
    receipt_id INT AUTO_INCREMENT PRIMARY KEY,
    user_id INT NOT NULL,
    transaction_id VARCHAR(255) NOT NULL,  -- Stripe transaction ID
    card_id INT NOT NULL,
    current_points INT NOT NULL,
    payment_method ENUM('CREDIT_CARD', 'DEBIT_CARD') NOT NULL,
    receipt_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    subscriber_status VARCHAR(50) NOT NULL,  -- Changed to VARCHAR to match the actual status values
    billing_address TEXT NOT NULL,
    amount DECIMAL(10,2) NOT NULL
);

-- Insert sample data
INSERT INTO receipt (user_id, transaction_id, card_id, current_points, payment_method, subscriber_status, billing_address, amount) VALUES
(1, 'pi_3NpKq2EZgVyuuU0m1kTYPn1X', 1, 0, 'CREDIT_CARD', 'active', '123 Main St, Singapore 123456', 10.00),
(2, 'pi_4MpLr3FZhWyvvV1n2lUZQm2Y', 2, 50, 'DEBIT_CARD', 'active', '456 Oak Ave, Singapore 567890', 25.00); 


CREATE DATABASE thread_db;
USE thread_db;

CREATE TABLE threads (
    thread_id INT AUTO_INCREMENT PRIMARY KEY,
    chapter_id INT NOT NULL,
    user_id INT NOT NULL,
    title VARCHAR(255) NOT NULL,
    content TEXT,
    create_date DATETIME DEFAULT CURRENT_TIMESTAMP,
    status ENUM('published', 'archived', 'deleted') DEFAULT 'published',
    likes INT DEFAULT 0,
    comment_count INT DEFAULT 0
);

-- Create the database
CREATE DATABASE user_db;

-- Use the database
USE user_db;

-- Create the user table
CREATE TABLE user (
    user_id INT PRIMARY KEY,
    user_name VARCHAR(100) NOT NULL,
    phone_number INT NOT NULL,
    email VARCHAR(100) NOT NULL,
    address VARCHAR(255) NOT NULL,
    points INT DEFAULT 500,
    subscriber_status ENUM('MONTHLY', 'QUARTERLY', 'YEARLY', 'NIL') NOT NULL DEFAULT 'NIL'
);

-- Insert sample data into the user table
INSERT INTO user (user_id, user_name, phone_number, email, address, points, subscriber_status) VALUES
(1, 'John Doe', 1234567890, 'john@example.com', '123 Main St', 500, 'NIL'),
(2, 'Jane Smith', 987654321, 'jane@example.com', '456 Oak Ave', 50, 'MONTHLY');

CREATE DATABASE waitlist_db;  -- Create database (if not exists)
USE waitlist_db;              -- Select the database

CREATE TABLE waitlist (
    id INT AUTO_INCREMENT PRIMARY KEY,
    user_id INT NOT NULL,
    username VARCHAR(255) NOT NULL,
    comic_id INT NOT NULL,
    comic_name VARCHAR(255) NOT NULL,
    comic_volume VARCHAR(255) NOT NULL,
    price_per_item DECIMAL(10,2) NOT NULL,
    timestamp DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

